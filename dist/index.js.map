{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["//import { Promise } from \"bluebird\";\r\nimport GitHubApi from \"github\";\r\nimport lodashDeep from \"lodash-deep\";\r\nimport yaml from \"js-yaml\";\r\nimport fs from \"fs\";\r\nimport https from \"https\";\r\nimport extend from \"extend-shallow\";\r\nimport _ from \"./lodash-extended\";\r\nimport path from \"path\";\r\nimport S from \"string\";\r\nimport mkdirp from \"mkdirp\";\r\n\r\nexport default class Sammler {\r\n\r\n\tconstructor ( config ) {\r\n\t\tthis.gitHub = null;\r\n\t\tthis.environment = process.env.NODE_ENV || \"development\";\r\n\t\tthis._init( config );\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize the instance of Sammler.\r\n\t * @param config\r\n\t * @private\r\n\t */\r\n\t_init ( config ) {\r\n\r\n\t\tvar that = this;\r\n\t\tlet currentConfig = this._getConfig( config );\r\n\t\tthis.gitHub = new GitHubApi( currentConfig );\r\n\r\n\t\tvar authToken = process.env.NODE_SAMMLER_TOKEN;\r\n\t\tif ( authToken ) {\r\n\t\t\tthat.gitHub.authenticate(\r\n\t\t\t\t{\r\n\t\t\t\t\ttype: \"oauth\",\r\n\t\t\t\t\ttoken: authToken\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current config\r\n\t * @param instanceConfig\r\n\t * @private\r\n\t */\r\n\t_getConfig ( instanceConfig ) {\r\n\t\tlet defaultConfig = {\r\n\t\t\tversion: \"3.0.0\",\r\n\t\t\tdebug: false, //(this.environment === 'development') ? true : false,\r\n\t\t\tprotocol: \"https\",\r\n\t\t\ttimeout: 5000\r\n\t\t};\r\n\t\treturn extend( defaultConfig, instanceConfig );\r\n\t}\r\n\r\n\t/**\r\n\t * Get the content of a given source-definition.\r\n\t * @param sourceDef\r\n\t * @returns {*}\r\n\t */\r\n\tgetContent ( sourceDef ) {\r\n\t\tvar that = this;\r\n\t\treturn new Promise( ( resolved, rejected ) => {\r\n\t\t\tthat.gitHub.repos.getContent( sourceDef, ( err, data ) => {\r\n\t\t\t\tif ( err ) {\r\n\t\t\t\t\trejected( err );\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t//if ( sourceDef.recursive === true ) {\r\n\t\t\t\t\t//\r\n\t\t\t\t\t//}\r\n\r\n\t\t\t\t\tvar filter = sourceDef.filter || [\"dir\", \"file\"];\r\n\t\t\t\t\tvar filteredData;\r\n\r\n\t\t\t\t\t// only array of returned contents can be filtered, not a single item.\r\n\t\t\t\t\tif ( _.isArray( data ) ) {\r\n\t\t\t\t\t\tfilteredData = _.filterByValues( data, \"type\", filter );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresolved( filteredData || data );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the collection of source-definitions.\r\n\t * @param sourceDefArr\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetContents ( sourceDefArr ) {\r\n\t\tlet getContentPromises = sourceDefArr.map( this.gitHub.repos.getContent );\r\n\t\treturn Promise.all( getContentPromises );\r\n\t}\r\n\r\n\t_getLocalTarget ( localTarget, gitHubFile, gitHubPath ) {\r\n\r\n\t\tlet baseLocalPath = localTarget;\r\n\t\tlet file = S( gitHubFile ).chompLeft( gitHubPath ).chompLeft( '/' ).s;\r\n\r\n\t\treturn path.normalize( path.join( baseLocalPath, file ) );\r\n\r\n\t}\r\n\r\n\tsaveContent ( gitHubContent, requestedDir, target ) {\r\n\r\n\t\tlet that = this;\r\n\t\treturn new Promise( ( resolved, rejected ) => {\r\n\t\t\tlet localTarget = path.resolve( that._getLocalTarget( target, gitHubContent.path, requestedDir ) );\r\n\r\n\t\t\tmkdirp.sync( path.dirname( localTarget ) );\r\n\t\t\tlet file = fs.createWriteStream( localTarget );\r\n\t\t\thttps.get( gitHubContent.download_url, ( response ) => {\r\n\t\t\t\t\tconsole.log( 'response.status', response.statusCode );\r\n\t\t\t\t\tresponse.pipe( file );\r\n\t\t\t\t} )\r\n\t\t\t\t.on( \"error\", ( e ) => {\r\n\t\t\t\t\trejected( e );\r\n\t\t\t\t} );\r\n\t\t\tfile.on( \"finish\", () => {\r\n\t\t\t\tfile.close( () => {\r\n\t\t\t\t\tresolved( file.path );\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\t\t\tfile.on( \"error\", ( err ) => {\r\n\t\t\t\tconsole.error( err );\r\n\t\t\t\trejected( err );\r\n\t\t\t} )\r\n\t\t} );\r\n\t}\r\n\r\n\t/**\r\n\t * Save a GitHub content to disk.\r\n\t * @param gitHubContent\r\n\t * @param target\r\n\t * @private\r\n\t */\r\n\t_saveToDisk ( gitHubContent, target ) {\r\n\r\n\t}\r\n\r\n\tsaveContents ( sourceDefArray ) {\r\n\r\n\t}\r\n}"],"sourceRoot":"D:\\Projects\\private-projects\\sammler\\lib"}