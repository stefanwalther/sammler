{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Promise from \"bluebird\";\r\nimport fs from \"fs\";\r\nimport https from \"https\";\r\nimport extend from \"extend-shallow\";\r\nimport _ from \"lodash\";\r\nimport path from \"path\";\r\nimport s from \"string\";\r\nimport mkdirp from \"mkdirp\";\r\nimport octonode from \"octonode\";\r\nimport lodashDeep from \"lodash-deep\";\r\n\r\nfunction resolveKey ( obj, key ) {\r\n\treturn (typeof key === \"function\") ? key( obj ) : _.deepGet( obj, key );\r\n}\r\n_.mixin( lodashDeep );\r\n_.mixin( {\r\n\t\"filterByValues\": function ( collection, key, values ) {\r\n\t\treturn _.filter( collection, function ( o ) {\r\n\t\t\treturn _.contains( values, resolveKey( o, key ) );\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\nexport class Sammler {\r\n\tconstructor ( config ) {\r\n\t\tthis.environment = process.env.NODE_ENV || \"development\";\r\n\t\tthis.config = this._getConfig( config );\r\n\t\tthis._init( this.config );\r\n\t\tthis._client = null;\r\n\r\n\t\tvar authToken = process.env.NODE_SAMMLER_TOKEN;\r\n\t\tif ( authToken ) {\r\n\t\t\tthis._client = octonode.client( authToken );\r\n\t\t} else {\r\n\t\t\tthis._client = octonode.client();\r\n\t\t}\r\n\t}\r\n\r\n\tget client () {\r\n\t\treturn this._client;\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize the instance of Sammler.\r\n\t * @param config\r\n\t * @private\r\n\t */\r\n\t_init ( /*config*/ ) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get the content of a given source-definition.\r\n\t * @param {Object} sourceDef\r\n\t * @param {String} sourceDef.user - The user on GitHub (e.g. `stefanwalther`). Mandatory.\r\n\t * @param {String} sourceDef.repo - Name of the repository (e.g. `sammler-test-repo1`). Mandatory.\r\n\t * @param {String?} sourceDef.ref - The branch, defaults to `master`.\r\n\t * @param {String?} sourceDef.path - Path to fetch contents from (e.g. `dir-1` n sammler-test-repo1). Defaults to \"\".\r\n\t * @param {Boolean?} sourceDef.recursive - Whether to fetch contents recursively or not, defaults to false.\r\n\t *\r\n\t * @returns {Promise<Object>}\r\n\t */\r\n\tgetContent ( sourceDef ) {\r\n\t\treturn this._getSingleContent( sourceDef );\r\n\t}\r\n\r\n\t/**\r\n\t * Save contents to disk.\r\n\t * @param {Object}sourceDef - The source definition.\r\n\t * @param {Object}gitHubContents - Retrieved gitHub contents.\r\n\t * @param {String}targetDir - The local target directory.\r\n\t */\r\n\tsaveContents ( sourceDef, gitHubContents, targetDir ) {\r\n\r\n\t\tif ( this._arrayIfy( gitHubContents ) ) {\r\n\t\t\tvar promises = [];\r\n\t\t\tgitHubContents.forEach( ( ghContent ) => {\r\n\t\t\t\tpromises.push( this._saveContent( ghContent, sourceDef.path, targetDir ) );\r\n\t\t\t} );\r\n\t\t\treturn Promise.all( promises );\r\n\t\t} else {\r\n\t\t\treturn Promise.rejected( \"No contents passed to save!\" );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieve gitHub contents based on a source-definition and store the results to the given target directory.\r\n\t * Basically calls .getContent() and then .saveContents()\r\n\t * @param sourceDef\r\n\t * @param targetDir\r\n\t */\r\n\tfetchContents ( sourceDef, targetDir ) {\r\n\r\n\t\treturn new Promise( ( resolved, rejected ) => {\r\n\t\t\tthis.getContent( sourceDef )\r\n\t\t\t\t.then( ( gitHubContents ) => {\r\n\t\t\t\t\tthis.saveContents( sourceDef, gitHubContents, targetDir )\r\n\t\t\t\t\t\t.then( ( data ) => {\r\n\t\t\t\t\t\t\tresolved( data );\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\t// ****************************************************************************************\r\n\t// Private methods\r\n\t// ****************************************************************************************\r\n\t/**\r\n\t * Arrayify an item.\r\n\t * @param item\r\n\t * @returns {*}\r\n\t * @private\r\n\t */\r\n\t_arrayIfy ( item ) {\r\n\t\tif ( _.isArray( item ) ) {\r\n\t\t\treturn item;\r\n\t\t} else {\r\n\t\t\tlet x = [];\r\n\t\t\tx.push( item );\r\n\t\t\treturn x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Filter either only directories, files or both from a given result-set.\r\n\t * @param data\r\n\t * @param {Array} filter The given filter, containing the following possible values: [\"dir\"], [\"file\"] or [\"dir\", \"file\"]. Defaults to the latter one.\r\n\t * @private\r\n\t * @returns {Promise.<*>}\r\n\t */\r\n\t_filter ( data, filter ) {\r\n\r\n\t\tfilter = filter || [\"dir\", \"file\"];\r\n\t\tvar filteredData;\r\n\t\t// only array of returned contents can be filtered, not a single item.\r\n\t\tif ( _.isArray( data ) ) {\r\n\t\t\tfilteredData = _.filterByValues( data, \"type\", filter );\r\n\t\t}\r\n\t\treturn Promise.resolve( filteredData || data );\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current config\r\n\t * @param instanceConfig\r\n\t * @private\r\n\t */\r\n\t_getConfig ( instanceConfig ) {\r\n\t\tlet defaultConfig = {\r\n\t\t\tversion: \"3.0.0\",\r\n\t\t\tdebug: false, //(this.environment === \"development\") ? true : false,\r\n\t\t\tprotocol: \"https\",\r\n\t\t\ttimeout: 5000\r\n\t\t};\r\n\t\treturn extend( defaultConfig, instanceConfig );\r\n\t}\r\n\r\n\t/**\r\n\t * Promisified call to get the content using octonode.\r\n\t * (Since octonode is just used here and in _init, octonode could be replaced easily with another lib)\r\n\t * @param rep\r\n\t * @param ref\r\n\t * @param ghPath\r\n\t */\r\n\t_getRepoContent ( user, repo, ref, ghPath ) {\r\n\t\treturn new Promise( ( resolved, rejected ) => {\r\n\t\t\tthis._client.repo( user + \"/\" + repo, ref ).contents( ghPath, ( err, data ) => {\r\n\t\t\t\tif ( err ) {\r\n\t\t\t\t\trejected( err );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresolved( this._arrayIfy( data ) );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\t_getSingleContent ( sourceDef ) {\r\n\r\n\t\treturn this._getRepoContent( sourceDef.user, sourceDef.repo, sourceDef.ref, sourceDef.path )\r\n\t\t\t.map( ( content ) => {\r\n\t\t\t\tlet def = {\r\n\t\t\t\t\tuser: sourceDef.user,\r\n\t\t\t\t\trepo: sourceDef.repo,\r\n\t\t\t\t\tref: sourceDef.ref,\r\n\t\t\t\t\tpath: content.path,\r\n\t\t\t\t\trecursive: sourceDef.recursive\r\n\t\t\t\t};\r\n\t\t\t\treturn (content.type === \"dir\" && sourceDef.recursive === true) ? this._getSingleContent( def ) : content;\r\n\t\t\t} )\r\n\t\t\t.then( ( data ) => {\r\n\t\t\t\treturn sourceDef.filter ? this._filter( data, sourceDef.filter ) : Promise.resolve( data );\r\n\t\t\t} )\r\n\t\t\t.reduce( ( a, b ) => {\r\n\t\t\t\treturn a.concat( b );\r\n\t\t\t}, [] );\r\n\t}\r\n\r\n\t/**\r\n\t * Return a local target for a given gitHub file.\r\n\t * @param {String} localTarget - Local base target\r\n\t * @param {Object} gitHubFile - The GitHub content definition of a single file.\r\n\t * @param {String} gitHubPath - The original GitHub path of the repository.\r\n\t * @returns {string}\r\n\t * @private\r\n\t */\r\n\t_getLocalTarget ( localTarget, gitHubFile, gitHubPath ) {\r\n\r\n\t\tlet baseLocalPath = localTarget;\r\n\t\tlet file = s( gitHubFile ).chompLeft( gitHubPath ).chompLeft( \"/\" ).s;\r\n\r\n\t\treturn path.normalize( path.join( baseLocalPath, file ) );\r\n\t}\r\n\r\n\t/**\r\n\t * Saves a GitHub content to disk.\r\n\t * @param {Object}gitHubContent - The GitHub content (https://developer.github.com/v3/repos/contents/#response-if-content-is-a-file)\r\n\t * @param {String}requestedDir - The directory originally requested.\r\n\t * @param {String}target - The local directory to save the content to.\r\n\t * @private\r\n\t */\r\n\t_saveContent ( gitHubContent, requestedDir, target ) {\r\n\r\n\t\treturn new Promise( ( resolved, rejected ) => {\r\n\t\t\tlet localTarget = path.resolve( this._getLocalTarget( target, gitHubContent.path, requestedDir ) );\r\n\r\n\t\t\tmkdirp.sync( path.dirname( localTarget ) );\r\n\t\t\tlet file = fs.createWriteStream( localTarget );\r\n\t\t\thttps.get( gitHubContent.download_url, ( response ) => {\r\n\t\t\t\tresponse.on( \"data\", ( data ) => {\r\n\t\t\t\t\tfile.write( data );\r\n\t\t\t\t} ).on( \"end\", () => {\r\n\t\t\t\t\tfile.end();\r\n\t\t\t\t\tresolved( file.path );\r\n\t\t\t\t} );\r\n\t\t\t} ).on( \"error\", ( err ) => {\r\n\t\t\t\trejected( err );\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":"D:\\Projects\\private-projects\\sammler\\lib"}