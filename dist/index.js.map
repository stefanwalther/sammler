{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import Promise from \"bluebird\";\r\nimport lodashDeep from \"lodash-deep\";\r\nimport yaml from \"js-yaml\";\r\nimport fs from \"fs\";\r\nimport https from \"https\";\r\nimport extend from \"extend-shallow\";\r\nimport _ from \"./lodash-extended\";\r\nimport path from \"path\";\r\nimport S from \"string\";\r\nimport mkdirp from \"mkdirp\";\r\nimport octonode from \"octonode\";\r\n\r\nexport default class Sammler {\r\n\tconstructor ( config ) {\r\n\t\tthis.environment = process.env.NODE_ENV || \"development\";\r\n\t\tthis.config = this._getConfig( config );\r\n\t\tthis._init( this.config );\r\n\t\tthis._client;\r\n\r\n\t\tvar authToken = process.env.NODE_SAMMLER_TOKEN;\r\n\t\tif ( authToken ) {\r\n\t\t\tthis._client = octonode.client( authToken );\r\n\t\t} else {\r\n\t\t\tthis._client = octonode.client();\r\n\t\t}\r\n\r\n\t\t//Promise.prototype.finally = function ( callback ) {\r\n\t\t//\tlet p = this.constructor;\r\n\t\t//\t// We donâ€™t invoke the callback in here,\r\n\t\t//\t// because we want then() to handle its exceptions\r\n\t\t//\treturn this.then(\r\n\t\t//\t\t// Callback fulfills: pass on predecessor settlement\r\n\t\t//\t\t// Callback rejects: pass on rejection (=omit 2nd arg.)\r\n\t\t//\t\tvalue  => p.resolve( callback() ).then( () => value ),\r\n\t\t//\t\treason => p.resolve( callback() ).then( () => { throw reason } )\r\n\t\t//\t);\r\n\t\t//};\r\n\r\n\t}\r\n\r\n\tget client () {\r\n\t\treturn this._client;\r\n\t}\r\n\r\n\t/**\r\n\t * Initialize the instance of Sammler.\r\n\t * @param config\r\n\t * @private\r\n\t */\r\n\t_init ( config ) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Get the current config\r\n\t * @param instanceConfig\r\n\t * @private\r\n\t */\r\n\t_getConfig ( instanceConfig ) {\r\n\t\tlet defaultConfig = {\r\n\t\t\tversion: \"3.0.0\",\r\n\t\t\tdebug: false, //(this.environment === 'development') ? true : false,\r\n\t\t\tprotocol: \"https\",\r\n\t\t\ttimeout: 5000\r\n\t\t};\r\n\t\treturn extend( defaultConfig, instanceConfig );\r\n\t}\r\n\r\n\t//\r\n\tgetContentRec ( sourceDef ) {\r\n\r\n\t\treturn this._getRepoContent( sourceDef.user, sourceDef.repo, sourceDef.ref, sourceDef.path )\r\n\t\t\t.map( ( content ) => {\r\n\t\t\t\tlet def = {\r\n\t\t\t\t\tuser: sourceDef.user,\r\n\t\t\t\t\trepo: sourceDef.repo,\r\n\t\t\t\t\tref: sourceDef.ref,\r\n\t\t\t\t\tpath: content.path\r\n\t\t\t\t};\r\n\t\t\t\treturn content.type === \"dir\" ? this.getContentRec( def ) : content;\r\n\t\t\t} )\r\n\t\t\t.reduce( ( a, b ) => {\r\n\t\t\t\treturn a.concat( b )\r\n\t\t\t}, [] );\r\n\t}\r\n\r\n\t/**\r\n\t * Promisified call to get the content\r\n\t * @param rep\r\n\t * @param ref\r\n\t * @param path\r\n\t */\r\n\t_getRepoContent ( user, repo, ref, path ) {\r\n\t\treturn new Promise( ( resolved, rejected ) => {\r\n\t\t\tthis._client.repo( user + \"/\" + repo, ref ).contents( path, ( err, data ) => {\r\n\t\t\t\tif ( err ) {\r\n\t\t\t\t\trejected( err );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresolved( data );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\t/**\r\n\t * Get the content of a given source-definition.\r\n\t * @param sourceDef\r\n\t * @param {String} sourceDef.user - The user (e.g. `stefanwalther`). Mandatory.\r\n\t * @param {String} sourceDef.repo - Name of the repository (e.g. `sammler-test-repo1`). Mandatory.\r\n\t * @param {String} sourceDef.ref - The branch, defaults to `master`.\r\n\t * @param {String} sourceDef.path - Path to fetch contents from (e.g. `dir-1` n sammler-test-repo1). Defaults to \"\".\r\n\t * @param {Boolean} recoursive - Whether to fetch contents recursively or not, defaults to false.\r\n\t * @returns {*}\r\n\t */\r\n\tgetContent ( sourceDef, recursive ) {\r\n\t\tvar results = [];\r\n\t\tvar that = this;\r\n\t\treturn new Promise( ( resolved, rejected ) => {\r\n\t\t\tthis._getRepoContent( sourceDef.user, sourceDef.repo, sourceDef.ref, sourceDef.path ).then( ( data ) => {\r\n\t\t\t\t\t//console.log( \"dir\", _.find( data, {type: \"dir\"} ) );\r\n\t\t\t\t\tif ( recursive === true && _.find( data, {type: \"dir\"} ) ) {\r\n\r\n\t\t\t\t\t\tlet fetchDirPromises;\r\n\t\t\t\t\t\t_.where( data, {type: \"dir\"}, ( dir ) => {\r\n\t\t\t\t\t\t\tconsole.log( \"dir\", dir );\r\n\t\t\t\t\t\t\tlet fetchDirDef = {\r\n\t\t\t\t\t\t\t\tuser: sourceDef.user,\r\n\t\t\t\t\t\t\t\trepo: sourceDef.repo,\r\n\t\t\t\t\t\t\t\tpath: dir.path\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tconsole.log( \"fetchDirDef\", fetchDirDef );\r\n\t\t\t\t\t\t\tfetchDirPromises.push( that.getContent( fetchDirDef, recursive ) );\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t//return Promise.all( fetchDirPromises );\r\n\t\t\t\t\t\tPromise.all( fetchDirPromises )\r\n\t\t\t\t\t\t\t.then( ( data ) => {\r\n\t\t\t\t\t\t\t\tresolved( data );\r\n\t\t\t\t\t\t\t} )\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar filter = sourceDef.filter || [\"dir\", \"file\"];\r\n\t\t\t\t\t\tvar filteredData;\r\n\t\t\t\t\t\t// only array of returned contents can be filtered, not a single item.\r\n\t\t\t\t\t\tif ( _.isArray( data ) ) {\r\n\t\t\t\t\t\t\tfilteredData = _.filterByValues( data, \"type\", filter );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresolved( filteredData || data );\r\n\t\t\t\t\t}\r\n\t\t\t\t} )\r\n\t\t\t\t.catch( ( err ) => {\r\n\t\t\t\t\trejected( err );\r\n\t\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\t_getFilteredData () {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the collection of source-definitions.\r\n\t * @param sourceDefArr\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetContents ( sourceDefArr ) {\r\n\t\tlet getContentPromises = [];\r\n\t\tsourceDefArr.forEach( ( def ) => {\r\n\t\t\tgetContentPromises.push( this.getContent( def ) );\r\n\t\t} );\r\n\t\treturn Promise.all( getContentPromises );\r\n\t}\r\n\r\n\t_getLocalTarget ( localTarget, gitHubFile, gitHubPath ) {\r\n\r\n\t\tlet baseLocalPath = localTarget;\r\n\t\tlet file = S( gitHubFile ).chompLeft( gitHubPath ).chompLeft( '/' ).s;\r\n\r\n\t\treturn path.normalize( path.join( baseLocalPath, file ) );\r\n\r\n\t}\r\n\r\n\tsaveContent ( gitHubContent, requestedDir, target ) {\r\n\r\n\t\tlet that = this;\r\n\t\treturn new Promise( ( resolved, rejected ) => {\r\n\t\t\tlet localTarget = path.resolve( that._getLocalTarget( target, gitHubContent.path, requestedDir ) );\r\n\r\n\t\t\tmkdirp.sync( path.dirname( localTarget ) );\r\n\t\t\tlet file = fs.createWriteStream( localTarget );\r\n\t\t\thttps.get( gitHubContent.download_url, ( response ) => {\r\n\t\t\t\tresponse.on( \"data\", ( data ) => {\r\n\t\t\t\t\tfile.write( data );\r\n\t\t\t\t} ).on( \"end\", () => {\r\n\t\t\t\t\tfile.end();\r\n\t\t\t\t\tresolved( file.path );\r\n\t\t\t\t} )\r\n\t\t\t} ).on( \"error\", ( err ) => {\r\n\t\t\t\trejected( err );\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\t/**\r\n\t * Save a GitHub content to disk.\r\n\t * @param gitHubContent\r\n\t * @param target\r\n\t * @private\r\n\t */\r\n\t_saveToDisk ( gitHubContent, target ) {\r\n\r\n\t}\r\n\r\n\tsaveContents ( sourceDefArray ) {\r\n\r\n\t}\r\n}\r\n"],"sourceRoot":"D:\\Projects\\private-projects\\sammler\\lib"}